h2. <%= title('Player API') %>

*Methods*

"(c)@play@":/javascript-api/player#play "(c)@pause@":/javascript-api/player#pause "(c)@stop@":/javascript-api/player#stop "(c)@setSize@":/javascript-api/player#setSize "(c)@videoId@":/javascript-api/player#videoId "(c)@videoElement@":/javascript-api/player#videoElement "(c)@on@":/javascript-api/player#on "(c)@seekTo@":/javascript-api/player#seekTo "(c)@duration@":/javascript-api/player#duration  "(c)@playbackTime@":/javascript-api/player#playbackTime "(c)@videoWidth@":/javascript-api/player#videoWidth "(c)@videoHeight@":/javascript-api/player#videoHeight

*Events*

"(c)@start@":/javascript-api/player#event-start "(c)@play@":/javascript-api/player#event-play "(c)@pause@":/javascript-api/player#event-pause "(c)@end@":/javascript-api/player#event-end "(c)@stop@":/javascript-api/player#event-stop "(c)@seek@":/javascript-api/player#event-seek "(c)@metadata@":/javascript-api/player#event-metadata "(c)@timeUpdate@":/javascript-api/player#event-timeupdate

See also "Using the JavaScript API":/javascript-api/usage, "Application API":/javascript-api/application and "Lightbox API":/javascript-api/lightbox.


h3(#methods). Methods

These API methods are to be called on a @player@ object, which you can retrieve in the following way

bc(language-javascript). var player = sublime.player(elementOrId);

which is equivalent to

bc(language-javascript). var player = sublime(elementOrId);


h3(#play). "@player.play()@":#play

Plays the video. If the video is already playing, the call has no effect.

*Note:* on touch devices user interaction is required to start playing the video.


h3(#pause). "@player.pause()@":#pause

Pauses the video. If the video is already paused, the call has no effect.


h3(#stop). "@player.stop()@":#stop

Stops the video and shows the initial play button. If the video is already stopped, the call has no effect.


h3(#videoId). "@player.videoId() ⇒ String@":#videoId

Returns the @id@ of the DOM @<video>@ element, or @undefined@ if the video has no id.


h3(#videoElement). "@player.videoElement() ⇒ Element@":#videoElement

Returns the DOM @<video>@ element.


h3(#setSize). "@player.setSize(width, [height])@":#setSize

* <span class="param">@width@</span> (@Number@) - An integer representing the number of pixels. Set it to @null@ if you want to modify only the height of the video.
* <span class="param">@height@</span> (@Number@) - An integer representing the number of pixels. Set it to @null@ (or omit this parameter) if you want to modify only the width of the video. Default is @null@.

Use this method to resize the width and/or height of a video (this works on any browser and device).

If you want to scale the video proportionally, you need to compute the new size and then set both the <span class="param">@width@</span> and <span class="param">@height@</span> parameters.

This method has no effect if the player is in fullmode (fullscreen or fullwindow).

**Fluid width and responsive layouts**
If you want to integrate SublimeVideo in your fluid width or responsive layout, you can simply take advantage of the "@autoresize@ player setting":/settings/player-settings#autoresize.

**Example**
* "Integration in a responsive layout":/responsive-layout


h3(#on). "@player.on(eventOrHash, [callback])@":#on

* <span class="param">@eventOrHash@</span> (@String@ | @Object@) - A string representing the event name to listen, or an object where its keys are events and its values are callbacks.

* <span class="param">@callback@</span> (@Function@) - The function to call when the event occurs. Pass this parameter only if the first one is an event (@String@).

Registers and invokes the given callbacks every time that the corresponding events occur.

**Example - listening a single event**

bc(language-javascript). sublime.player('my_player_id').on('start', function(player) {
  console.log('playback started.');
});

**Example - listening more events**

bc(language-javascript). sublime.player('my_player_id').on({
  start: function(player) { console.log('playback started.') },
  end:   function(player) { console.log('playback ended.') }
});


h3(#seekTo). "@player.seekTo(time)@":#seekTo

* <span class="param">@time@</span> (@Number@) - The time in seconds to seek to.

Seeks to the specified playback time. Flash allows you to seek to only some predefined frames, the @keyframes@. The more keyframes your videos have, the more precise the seek feature will be. You can specify the number of keyframes during the encoding phase, however adding many keyframes may significantly increase the size of your videos.


h3(#duration). "@player.duration() ⇒ Number@":#duration

Returns the video duration in seconds. The duration is available only once the video metadata has been loaded, hence calling this method before obtaining the metadata will return @undefined@.


h3(#playbackTime). "@player.playbackTime() ⇒ Number@":#playbackTime

Returns the current playback time. This method will return @0@ if the video has not been started yet.


h3(#videoWidth). "@player.videoWidth() ⇒ Number@":#videoWidth

Returns the video width for the current quality. The video resolution is available only once the metadata has been loaded, hence calling this method before obtaining the metadata will return @undefined@.

Note: With YouTube videos this value is just an estimation, since it's not possible to obtain the real value via their API.


h3(#videoHeight). "@player.videoHeight() ⇒ Number@":#videoHeight

Returns the video height for the current quality. The video resolution is available only once the metadata has been loaded, hence calling this method before obtaining the metadata will return @undefined@.

Note: With YouTube videos this value is just an estimation, since it's not possible to obtain the real value via their API.


h3(#events). Events

Below are all the events supported by the player. You may listen to these events via the "(c)@player.on@":/javascript-api/player#on method.


h3(#event-start). "@start@":#event-start

Fired when the video is started (either by clicking on the initial play button or by calling the "(c)@player.play@":/javascript-api/player#play method). This event is not fired every time the video is resumed after pause, but just the first time the video is started.

*Callback parameters*

* <span class="param">@player@</span> (@Object@) - The player API object.


h3(#event-play). "@play@":#event-play

Fired when the video is started and everytime the video is resumed after pause. The first @play@ event is always preceded by a @start@ event, otherwise it will always be preceded by a @pause@ event.

*Callback parameters*

* <span class="param">@player@</span> (@Object@) - The player API object.


h3(#event-pause). "@pause@":#event-pause

Fired when the playback pauses.

*Callback parameters*

* <span class="param">@player@</span> (@Object@) - The player API object.


h3(#event-end). "@end@":#event-end

Fired when the playback ends. This event is always preceded by a @pause@ event.

*Callback parameters*

* <span class="param">@player@</span> (@Object@) - The player API object.


h3(#event-stop). "@stop@":#event-stop

Fired when the playback stops.

*Callback parameters*

* <span class="param">@player@</span> (@Object@) - The player API object.


h3(#event-seek). "@seek@":#event-seek

Fired when the video is seeked.

*Callback parameters*

* <span class="param">@player@</span> (@Object@) - The player API object.


h3(#event-metadata). "@metadata@":#event-metadata

Fired as soon as the video metadata is loaded.

*Callback parameters*

* <span class="param">@player@</span> (@Object@) - The player API object.


h3(#event-timeupdate). "@timeUpdate@":#event-timeupdate

Fired everytime the playback time changes.

*Callback parameters*

* <span class="param">@player@</span> (@Object@) - The player API object.

* <span class="param">@playbackTime@</span> (@Number@) - The current playback time.
