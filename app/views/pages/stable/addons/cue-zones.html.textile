h2. <%= title('Cue Zones') %>

This add-on allows you to perform a JavaScript action when the viewer enters or exits a certain zone in the video timeline.

You've probably already heard about "cue points". A cue point is a user defined "marker" at a specific time in the video when a custom event is designed to occur. The Cue Zones add-on allows you to define not only a starting but also an ending point - hence "zones" - in your video where those custom actions should start and end occurring.

You can use the Cue Zones API to trigger any custom action, such as synchronizing slides alongside a video presentation, displaying side-advertising or creating chapters in your video.

h3(#demo). "Demo":#demo

The first demo uses the Cue Zones API to update the background image and title at every video sequence change.

<%= jsfiddle_embed('4vv6G', height: 520, panes: 'result,html,js,css') %>

The following demo adds a chapters menu below the player which allows you to jump to the different sequences in the video (using the "@cuezones.goTo@":#goTo method).

<%= jsfiddle_embed('4vv6G', height: 520, panes: 'result,html,js,css') %>

h3(#methods). Methods

These API methods are to be called on a @cuezones@ object, which you can retrieve in the following way

bc(language-javascript). var cuezones = sublime.player(elementOrId).cuezones;

h3(#add). "@cuezones.addGroup(group)@":#add

* <span class="param">@group@</span> (@Object@) - The group object. This object has the following keys:
    - @id@: The id of the group (required only if you plan to use @goTo@).
    - @cuezones@: a list of cue zones of objects that contains @from@ or @to@ keys and @id@ (required only if you plan to use @goTo@).
    - @onenter@: The callback to fire when the playback enters a cue zone.
    - @onexit@: The callback to fire when the playback exits a cue zone.

Register a group of cue zones to the player. If a group with the same id already exists, it will be replaced by the new group.

*onenter/onexit callback parameters*
* <span class="param">@player@</span> (@Object@) - The player API object.
* <span class="param">@groupId@</span> (@String@) - The id of the group (if specified when adding the group).
* <span class="param">@cuezone@</span> (@Object@) - The cuezone API object. This object has the attributes:
  - @id@: The id of the cuezone (may be undefined).
  - @from@: The time that defines the start of the zone (may be undefined).
  - @computedFrom@: The computed time that defines the start of the zone (negative values are replaced by their corresponding positive values).
  - @to@: The time that defines the end of the zone (may be undefined).
  - @computedTo@: The computed time that defines the end of the zone (negative values are replaced by their corresponding positive values).

**Example - registering cuezones**

bc(language-javascript). var cuezones = [{
    id: 'Paris',
    from: 0,
    to: 5
  }, {
    id: 'London',
    from: 30
  }, {
    id: 'NYC',
    from: -10
}];
// we are now ready to register our cuezones
player.cuezones.addGroup({
  id: 'cities',
  cuezones: cuezones,
  onenter: function(player, groupId, cuezone, index) {
    console.log('entered cue zone ' + cuezone.id);
  },
  onexit: function(player, groupId, cuezone, index) {
    console.log('exited cue zone ' + cuezone.id);
  }
})

h3(#goTo). "@cuezones.goTo(cuezoneId)@":#goTo

* <span class="param">@cuezoneId@</span> (@<groupId>.<cuezoneId>@) - The id of the cuezone you wish to seek to.

Seek to the start of the cuezone with the given id.

**Example - seeking to the cue zone "London" of the group "cities"**

bc(language-javascript). // Let's say we added a group with id "cities"
// that contains a cue zone with id "London"
player.cuezones.goTo('cities.London');

h3(#removeGroup). "@cuezones.removeGroup(id)@":#removeGroup

* <span class="param">@id@</span> (@String@) - The id of the group to be removed.

Remove the group of cuezones with the given id. The call has no effect if a group with the given id cannot be found.

**Example - removing a list of cuezones**

bc(language-javascript). player.cuezones.removeGroup('my_group_id');

h3(#removeAllGroups). "@cuezones.removeAllGroups()@":#removeAllGroups

Remove all cuezones registered to the video player.

**Example - removing all registered groups of cuezones**

bc(language-javascript). player.cuezones.removeAllGroups();
