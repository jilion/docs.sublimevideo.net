- @page_title = "Playlists"

%h2= @page_title

:textile
  The example presented here allows your visitors to select which video to play by clicking on any of the thumbnails in the playlist. The selected video will be shown in the player; once the video finishes playing, the next one will automatically play.

  In this example, we are making extensive use of our "JavaScript API":/javascript-api.

  h4. HTML Code

  This example only has four videos, but you can use any number of videos in your own page. Just repeat the _video_wrap_ @<div>@ (and their respective @<li>@ elements) and keep the same @id@ logic for the @<video>@ and the @<li>@ elements: _video5_ / _thumbnail_video5_, _video6_ / _thumbnail_video6_, _videoN_ / _thumbnail_videoN_ and so on.

  bc(language-markup). <div id="playlist1" class="sv_playlist">
    <div class="video_wrap">
      <video id="video1" poster="posterframe1.jpg" width="640" height="360" preload="none">
        <source src="video1.mp4" />
        <source src="video1.webm" />
      </video>
    </div>
    <div class="video_wrap">
      <video id="video2" poster="posterframe2.jpg" width="640" height="360" preload="none">
        <source src="video2.mp4" />
        <source src="video2.webm" />
      </video>
    </div>
    <div class="video_wrap">
      <video id="video3" poster="posterframe3.jpg" width="640" height="360" preload="none">
        <source src="video3.mp4" />
        <source src="video3.webm" />
      </video>
    </div>
    <div class="video_wrap">
      <video id="video4" poster="posterframe4.jpg" width="640" height="360" preload="none">
        <source src="video4.mp4" />
        <source src="video4.webm" />
      </video>
    </div>
    <ul class="thumbs">
      <li id="thumbnail_video1">
        <a href="">
          <img alt="Thumbnail 1" src="thumbnail1.jpg" width="144" height="81" />
          <span class="play" />
        </a>
      </li>
      <li id="thumbnail_video2">
        <a href="">
          <img alt="Thumbnail 2" src="thumbnail2.jpg" width="144" height="81" />
          <span class="play" />
        </a>
      </li>
      <li id="thumbnail_video3">
        <a href="">
          <img alt="Thumbnail 3" src="thumbnail3.jpg" width="144" height="81" />
          <span class="play" />
        </a>
      </li>
      <li id="thumbnail_video4">
        <a href="">
          <img alt="Thumbnail 4" src="thumbnail4.jpg" width="144" height="81" />
          <span class="play" />
        </a>
      </li>
    </ul>
  </div>

  *Note:* Don't set the _sublime_ @class@ to any of the @<video>@ elements, they will all be prepared through the JS API.

  h4. CSS Code

  strong. Thumbnails below the video

  The following CSS rules hide the non-active @<video>@ elements (lines 8 and show the active ones (lines 17). They also add a simple _hover_ effect to the thumbnail @<li>@ elements (lines 69) and set a different style on the currently active thumbnail (lines 41 & 73).

  <pre data-line=8,17,41,69,73><code class="language-css">/* Thumbnails below the video */

  img {border:none;}

  .sv_playlist .video_wrap {
    width:640px;
    height:360px;
    display:none;
    background:#fff;
    padding:1px;
    -moz-box-shadow:rgba(0,23,60,0.5) 0 4px 17px;
    -webkit-box-shadow:rgba(0,23,60,0.5) 0 4px 17px;
    box-shadow:rgba(0,23,60,0.5) 0 4px 17px;
  }

  .sv_playlist .video_wrap.active {
    display:block;
  }

  .sv_playlist ul.thumbs {
    list-style-type:none;
    width:800px;
    overflow:hidden;
    margin:20px auto;
  }

  .sv_playlist li {
    float:left;
    display:block;
    width:144px;
    height:81px;
    margin:0 19px 19px 0;
    background:#000;
    border:1px solid #000;
    -moz-box-shadow:rgba(0,23,60,0.5) 0 2px 10px;
    -webkit-box-shadow:rgba(0,23,60,0.5) 0 2px 10px;
    box-shadow:rgba(0,23,60,0.5) 0 2px 10px;
  }

  .sv_playlist li.active {
    border-color:#fff;
  }

  .sv_playlist li a {
    display:block;
    position:relative;
  }

  .sv_playlist li a span.play {
    display:block;
    width:144px;
    height:81px;
    /* you can find the play icon here: http://f.cl.ly/items/3M0u0p0i0k1l3S0v2b1G/playlist_play_icon.png */
    background:url('playlist_play_icon.png') no-repeat center;
    background-color:rgba(0,0,0,0.6);
    position:absolute;
    top:0;
    left:0;
    -moz-box-shadow:inset rgba(255,255,255,0.3) 0 1px 0;
    -webkit-box-shadow:inset rgba(255,255,255,0.3) 0 1px 0;
    box-shadow:inset rgba(255,255,255,0.3) 0 1px 0;
    -o-transition:background-color,0.25s,linear;
    -moz-transition:background-color,0.25s,linear;
    -webkit-transition:background-color,0.25s,linear;
    transition:background-color,0.25s,linear;
  }

  .sv_playlist li a:hover span.play {
    background-color:rgba(0,0,0,0);
  }

  .sv_playlist li.active a span.play {
    background:none;
  }
  </code></pre>

  &nbsp;

  strong. Thumbnails on the right of the video

  The following CSS rules hide the non-active @<video>@ elements (lines 8 and show the active ones (lines 18). They also add a simple _hover_ effect to the thumbnail @<li>@ elements (lines 68) and set a different style on the currently active thumbnail (lines 40 & 72).

  <pre data-line=8,18,40,68,72><code class="language-css">/* Thumbnails on the right of the video */

  img {border:none;}

  .sv_playlist .video_wrap {
    width:640px;
    height:360px;
    display:none;
    float:left;
    background:#fff;
    padding:1px;
    -moz-box-shadow:rgba(0,23,60,0.5) 0 4px 17px;
    -webkit-box-shadow:rgba(0,23,60,0.5) 0 4px 17px;
    box-shadow:rgba(0,23,60,0.5) 0 4px 17px;
  }

  .sv_playlist .video_wrap.active {
    display:block;
  }

  .sv_playlist ul.thumbs {
    list-style-type:none;
    width:158px;
    float:left;
  }

  .sv_playlist li {
    display:block;
    width:144px;
    height:81px;
    margin:0 0 10px 12px;
    background:#000;
    border:1px solid #000;
    -moz-box-shadow:rgba(0,23,60,0.5) 0 2px 10px;
    -webkit-box-shadow:rgba(0,23,60,0.5) 0 2px 10px;
    box-shadow:rgba(0,23,60,0.5) 0 2px 10px;
  }

  .sv_playlist li.active {
    border-color:#fff;
  }

  .sv_playlist li a {
    display:block;
    position:relative;
  }

  .sv_playlist li a span.play {
    display:block;
    width:144px;
    height:81px;
    /* you can find the play icon here: http://f.cl.ly/items/3M0u0p0i0k1l3S0v2b1G/playlist_play_icon.png */
    background:url('playlist_play_icon.png') no-repeat center;
    background-color:rgba(0,0,0,0.6);
    position:absolute;
    top:0;
    left:0;
    -moz-box-shadow:inset rgba(255,255,255,0.3) 0 1px 0;
    -webkit-box-shadow:inset rgba(255,255,255,0.3) 0 1px 0;
    box-shadow:inset rgba(255,255,255,0.3) 0 1px 0;
    -o-transition:background-color,0.25s,linear;
    -moz-transition:background-color,0.25s,linear;
    -webkit-transition:background-color,0.25s,linear;
    transition:background-color,0.25s,linear;
  }

  .sv_playlist li a:hover span.play {
    background-color:rgba(0,0,0,0);
  }

  .sv_playlist li.active a span.play {
    background:none;
  }
  </code></pre>

  h4. JavaScript Code

  Below we provide 2 examples of the required code using jQuery and Prototype. Please make sure that you embed the chosen library in your page! You can find the latest jQuery "here":http://code.google.com/apis/libraries/devguide.html#jquery and the latest Prototype "here":http://code.google.com/apis/libraries/devguide.html#prototype.

  Put the following code in a @<script>@ element just before the @</body>@ tag, or in an external file.

  * "jQuery Version":https://gist.github.com/3945807#file_playlist_jquery.js
  * "Prototype Version":https://gist.github.com/3945807#file_playlist_prototype.js

  *Note:* In the future, we plan to include a built-in playlist function that will make this feature even easier to implement, without the need to know any JavaScript.

  h3(#demo). "Demo":#demo

  * "Playlist with thumbnails on the right of the video":http://test.sublimevideo.net/playlists
  * "Playlist with thumbnails below the video":http://test.sublimevideo.net/playlists-thumbs-below


  If you want to use several playlists in your page, please check out "this page":http://test.sublimevideo.net/multiple_playlists.
