- @page_title = "Using the JavaScript API"

%h2= @page_title

:textile
  h3(#api-object). "Overview":#api-object

  The SublimeVideo Player comes with an integrated JavaScript API. Once loaded, SublimeVideo Player instantiates a unique API object called @sublime@. All calls to the API must be done through this object.

  For performance puroposes, SublimeVideo Player and the @sublime@ API object are automatically loaded upon page load if there is at least an element with class @sublime@ in the DOM. If you have no videos (or lightboxes) initially on the page (and you plan for instance to add them dynamically later with JavaScript) you can use the "(c)@sublime.load@":/beta/javascript-api/methods#load method to force loading the player and the sublimevideo API object.

  bc(language-javascript). // Manually invoke load if there are no elements
  // with class sublime when the page is first loaded.
  sublime.load()

  Once SublimeVideo is loaded and the DOM elements with the class @sublime@ are prepared, the application invokes the callbacks registered with "(c)@sublime.ready@":/beta/javascript-api/methods#ready. Inside these callbacks you can safely call all other API methods.

  bc(language-javascript). sublime.ready(function(){
    // safely calls sublime API methods.
  });

  *_Notes_*
  The SublimeVideo JavaScript API might not be immediately available when the DOM is loaded, hence you should avoid making API calls in your own DOM loaded/ready method (e.g. @DOMContentLoaded@, jQuery's @.ready()@ or Prototype's @dom:loaded@)

  h3(#retrieving-api-objects). "Retrieving API objects":#retrieving-api-objects

  Every element that can be prepared by SublimeVideo (videos, lightboxes, etc) exposes its own set of APIs. You can retrieve these object in the by calling
  @sublime.<object_type>(elementOrId)@

  For instance, to get the @player@ for the video with id @my_video_id@

  bc(language-javascript). var player = sublime.player(my_video_id);

  and to get the @lightbox@ for the link with id @my_lightbox_trigger_id@

  bc(language-javascript). var lightbox = sublime.lightbox(my_lightbox_trigger_id);

  As a shortcut, you can also retrive API objects by dropping the @<object_type>@ as follows

  bc(language-javascript). var player   = sublime(my_video_id);
  var lightbox = sublime(my_lightbox_trigger_id);




  h3(#api-methods-and-listeners). "APIs":#api-methods-and-listeners

  h4. "Application":/beta/javascript-api/application

  "(c)@load@":/beta/javascript-api/application#load "(c)@ready@":/beta/javascript-api/application#ready "(c)@prepare@":/beta/javascript-api/application#prepare "(c)@unprepare@":/beta/javascript-api/application#unprepare "(c)@player@":/beta/javascript-api/application#player "(c)@lightbox@":/beta/javascript-api/application#lightbox "(c)@version@":/beta/javascript-api/application#version "(c)@env@":/beta/javascript-api/application#env

  h4. "Players":/beta/javascript-api/player

  "(c)@play@":/beta/javascript-api/player#play  "(c)@pause@":/beta/javascript-api/player#pause "(c)@stop@":/beta/javascript-api/player#stop "(c)@setSize@":/beta/javascript-api/player#setSize "(c)@on@":/beta/javascript-api/player#on

  h4. "Lightboxes":/beta/javascript-api/lightbox

  "(c)@open@":/beta/javascript-api/lightbox#open "(c)@close@":/beta/javascript-api/lightbox#close "(c)@on@":/beta/javascript-api/lightbox#on


